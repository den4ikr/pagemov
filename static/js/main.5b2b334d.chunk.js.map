{"version":3,"sources":["components/Header/HeaderStyle.js","components/Header/Header.jsx","components/FilmCard/FilmCardStyle.js","constants.js","services/localStorage.js","redux/actions/favorite-action.js","components/FilmCard/FilmCard.jsx","components/Favorite/FavoriteStyle.js","components/Favorite/Favorite.jsx","Api/api.js","redux/actions/popular-action.js","containers/FavoriteContainer/FavoriteContainer.jsx","components/Paginator/Paginator.jsx","common/assets/loadinggif.gif","components/Preloader/PreloaderStyle.js","components/Preloader/Preloader.jsx","components/Search/Search.jsx","components/Popular/PopularStyle.js","components/Popular/Popular.jsx","containers/PopularContainer/PopularContainer.jsx","redux/actions/search-action.js","components/FilmPage/FilmPageStyle.js","components/FilmPage/FilmPage.jsx","containers/FilmPageContainer/FilmPageContainer.jsx","redux/actions/film-page-action.js","App.js","reportWebVitals.js","redux/reducers/popular-reducer.js","redux/reducers/search-reducer.js","redux/reducers/film-page-reducer.js","redux/reducers/favorite-reducer.js","redux/redux-store.js","index.js"],"names":["makeStyles","link","color","paddingLeft","textDecoration","Header","style","useStyles","AppBar","position","Toolbar","Typography","variant","className","to","card","width","minHeight","marginTop","poster","height","margin","subRow","display","alignItems","justifyContent","addIcon","hover","cursor","genre","fontSize","SET_POPULAR_FILMS","SET_GENRES","SET_RESULT","SET_FILM_PAGE_DATA","SET_RECOMMENDATIONS","SET_FAVORITE","ADD_FAVORITE","REMOVE_FAVORITE","SET_IS_FAVORITE","getFavouriteList","JSON","parse","localStorage","getItem","isFilmFavourite","id","find","f","addToFavourites","film","a","films","newFilms","setItem","stringify","removeFromFavourites","filter","setAddFavorite","item","type","addFavorite","dispatch","removeFavoriteAction","setIsFavorite","getIsFavorite","FilmCard","genres","useDispatch","isFavorite","filmGenres","genre_ids","i","length","j","push","name","Card","CardMedia","alt","image","poster_path","CardContent","title","IconButton","onClick","map","index","join","row","flexWrap","epmtyList","textAlign","paddingTop","Favorite","favorite","instance","axios","create","baseURL","API","currentPage","get","search","movieId","getPopularFilms","response","popularFilms","data","getGenres","FavoriteContainer","props","useSelector","state","popular","useEffect","Paginator","Pagination","count","page","onChange","hadleChange","loadingGif","Preloader","src","LoadingGif","Search","TextField","onKeyPress","onSearch","onSearchChange","label","fullWidth","value","paginator","marginBottom","Popular","searchResult","results","total_pages","PopularContainer","useState","setPage","setSearch","result","event","window","scroll","target","query","key","posterbg","flexDirection","content","backgroundColor","opacity","top","left","zIndex","padding","container","maxWidth","cardRow","overview","recommendationRow","recTitlte","FilmPage","filmPageData","recommendations","addFavoriteFilm","backdropPath","backdrop_path","Object","keys","backgroundImage","backgroundRepeat","backgroundPosition","info","original_language","popularity","release_date","Button","withRouter","MOVIE_ID","match","params","getRecommendations","App","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b2b334d.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles(() => ({\r\n  link: {\r\n    color: \"#fff\",\r\n    paddingLeft: 15,\r\n    textDecoration: \"none\",\r\n  },\r\n}));\r\n","import { AppBar, Toolbar, Typography } from \"@material-ui/core\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport useStyles from \"./HeaderStyle\";\r\n\r\nexport const Header = () => {\r\n  const style = useStyles();\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Typography variant=\"h6\">\r\n          <NavLink className={style.link} to=\"/pagemov\">\r\n            Movie DB\r\n          </NavLink>\r\n          <NavLink className={style.link} to=\"/favorite\">\r\n            Favorite\r\n          </NavLink>\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles(() => ({\r\n  card: {\r\n    width: 320,\r\n    minHeight: 500,\r\n    marginTop: 25,\r\n  },\r\n  poster: {\r\n    width: 300,\r\n    height: 400,\r\n    margin: \"0 auto\",\r\n    marginTop: 10,\r\n  },\r\n  subRow: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  addIcon: {\r\n    hover: {\r\n      cursor: \"pointer\",\r\n    },\r\n  },\r\n  genre: {\r\n    fontSize: 12,\r\n  },\r\n}));\r\n","export const SET_POPULAR_FILMS = \"SET_POPULAR_FILMS\";\r\nexport const SET_GENRES = \"SET_GENRES\";\r\nexport const SET_RESULT = \"SET_RESULT\";\r\nexport const SET_FILM_PAGE_DATA = \"SET_FILM_PAGE_DATA\";\r\nexport const SET_RECOMMENDATIONS = \"SET_RECOMMENDATIONS\";\r\nexport const SET_FAVORITE = \"SET_FAVORITE\";\r\nexport const ADD_FAVORITE = \"ADD_FAVORITE\";\r\nexport const REMOVE_FAVORITE = \"REMOVE_FAVORITE\";\r\nexport const SET_IS_FAVORITE = \"SET_IS_FAVORITE\";\r\n","export const getFavouriteList = () => {\r\n  return JSON.parse(localStorage.getItem(\"favourites\")) || [];\r\n};\r\n\r\nexport const isFilmFavourite = (id) => {\r\n  const films = getFavouriteList();\r\n  return !!films.find((f) => f.id === id);\r\n};\r\n\r\nexport const addToFavourites = async (film) => {\r\n  const films = getFavouriteList();\r\n  const newFilms = [film, ...films];\r\n  await localStorage.setItem(\"favourites\", JSON.stringify(newFilms));\r\n  return newFilms;\r\n};\r\n\r\nexport const removeFromFavourites = async (id) => {\r\n  const films = getFavouriteList();\r\n  const newFilms = films.filter((f) => f.id !== id);\r\n  await localStorage.setItem(\"favourites\", JSON.stringify(newFilms));\r\n  return newFilms;\r\n};\r\n","import {\r\n  SET_FAVORITE,\r\n  ADD_FAVORITE,\r\n  REMOVE_FAVORITE,\r\n  SET_IS_FAVORITE,\r\n} from \"../../constants\";\r\nimport {\r\n  getFavouriteList,\r\n  addToFavourites,\r\n  removeFromFavourites,\r\n  isFilmFavourite,\r\n} from \"../../services/localStorage\";\r\n\r\nconst setFavorite = (favorite) => ({ type: SET_FAVORITE, favorite });\r\nexport const getFavorite = () => async (dispatch) => {\r\n  const response = await getFavouriteList();\r\n  dispatch(setFavorite(response));\r\n};\r\n\r\nconst setAddFavorite = (item) => ({ type: ADD_FAVORITE, item });\r\nexport const addFavorite = (item) => async (dispatch) => {\r\n  await addToFavourites(item);\r\n  dispatch(setAddFavorite(item));\r\n};\r\n\r\nexport const removeFavoriteAction = (id) => ({ type: REMOVE_FAVORITE, id });\r\nexport const removeFavorite = (id) => async (dispatch) => {\r\n  await removeFromFavourites(id);\r\n  dispatch(removeFavoriteAction(id));\r\n};\r\n\r\nexport const setIsFavorite = (id) => ({ type: SET_IS_FAVORITE, id });\r\nexport const getIsFavorite = (id) => async (dispatch) => {\r\n  await isFilmFavourite(id);\r\n  dispatch(setIsFavorite(id));\r\n};\r\n","import {\r\n  Card,\r\n  CardContent,\r\n  CardMedia,\r\n  IconButton,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport useStyles from \"./FilmCardStyle\";\r\nimport {\r\n  removeFavorite,\r\n  getIsFavorite,\r\n} from \"../../redux/actions/favorite-action\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { isFilmFavourite } from \"../../services/localStorage\";\r\nimport { addFavorite } from \"../../redux/actions/favorite-action\";\r\n\r\nexport const FilmCard = ({ film, genres }) => {\r\n  const dispatch = useDispatch();\r\n  const style = useStyles();\r\n  const isFavorite = isFilmFavourite(film.id);\r\n  const filmGenres = [];\r\n  if (film.genre_ids) {\r\n    for (let i = 0; i < film.genre_ids.length; i++) {\r\n      for (let j = 0; j < genres.length; j++) {\r\n        if (film.genre_ids[i] === genres[j].id) {\r\n          filmGenres.push(genres[j].name);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const addFavoriteFilm = () => {\r\n    dispatch(addFavorite(film));\r\n    dispatch(getIsFavorite(film.id));\r\n  };\r\n  const deleteFavorite = () => {\r\n    dispatch(removeFavorite(film.id));\r\n    dispatch(getIsFavorite(film.id));\r\n  };\r\n\r\n  return (\r\n    <Card className={style.card}>\r\n      <NavLink to={`/filmpage/${film.id}`}>\r\n        <CardMedia\r\n          className={style.poster}\r\n          alt=\"Poster\"\r\n          image={`https://image.tmdb.org/t/p/w300${film.poster_path}`}\r\n        />\r\n      </NavLink>\r\n      <CardContent>\r\n        <div className={style.subRow}>\r\n          <Typography className={style.title}>{film.title}</Typography>\r\n          {isFavorite ? (\r\n            <IconButton onClick={deleteFavorite}>\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          ) : (\r\n            <IconButton onClick={addFavoriteFilm}>\r\n              <AddCircleIcon className={style.addIcon} />\r\n            </IconButton>\r\n          )}\r\n        </div>\r\n        <Typography className={style.genre}>\r\n          Genres: {filmGenres.map((genre, index) => genre).join(\",\")}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles(() => ({\r\n  row: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  epmtyList: {\r\n    textAlign: \"center\",\r\n    paddingTop: 100,\r\n  },\r\n}));\r\n","import { Typography } from \"@material-ui/core\";\r\nimport { useEffect } from \"react\";\r\nimport { FilmCard } from \"../FilmCard/FilmCard\";\r\nimport useStyles from \"./FavoriteStyle\";\r\n\r\nexport const Favorite = ({ favorite, genres }) => {\r\n  const style = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      {favorite.length > 0 ? (\r\n        <div className={style.row}>\r\n          {favorite.map((film) => {\r\n            return <FilmCard key={film.id} film={film} genres={genres} />;\r\n          })}\r\n        </div>\r\n      ) : (\r\n        <div className={style.epmtyList}>\r\n          <Typography variant=\"h3\">List is empty</Typography>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3/\",\r\n});\r\n\r\nexport const API = {\r\n  getPopularFilms(currentPage) {\r\n    return instance.get(\r\n      `movie/top_rated?api_key=59b515f14ca7817fa52949d84c435157&language=en-US&page=${currentPage}`\r\n    );\r\n  },\r\n  getGenres() {\r\n    return instance.get(\r\n      `genre/movie/list?api_key=59b515f14ca7817fa52949d84c435157&language=en-US`\r\n    );\r\n  },\r\n  getSearch(search) {\r\n    return instance.get(\r\n      `search/movie?api_key=59b515f14ca7817fa52949d84c435157&language=en-US&query=${search}&page=1&include_adult=false`\r\n    );\r\n  },\r\n  getFilmData(movieId) {\r\n    return instance.get(\r\n      `movie/${movieId}?api_key=59b515f14ca7817fa52949d84c435157&language=en-US`\r\n    );\r\n  },\r\n  getRecommendations(movieId) {\r\n    return instance.get(\r\n      `movie/${movieId}/recommendations?api_key=59b515f14ca7817fa52949d84c435157&language=en-US&page=1`\r\n    );\r\n  },\r\n};\r\n","import { API } from \"../../Api/api\";\r\nimport { SET_POPULAR_FILMS, SET_GENRES } from \"../../constants\";\r\n\r\nconst setPopularFilms = (popularFilms) => ({\r\n  type: SET_POPULAR_FILMS,\r\n  popularFilms,\r\n});\r\nexport const getPopularFilms = (currentPage) => async (dispatch) => {\r\n  const response = await API.getPopularFilms(currentPage);\r\n  dispatch(setPopularFilms(response.data));\r\n};\r\n\r\nconst setGenres = (genres) => ({ type: SET_GENRES, genres });\r\nexport const getGenres = () => async (dispatch) => {\r\n  const response = await API.getGenres();\r\n  dispatch(setGenres(response.data.genres));\r\n};\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Favorite } from \"../../components/Favorite/Favorite\";\r\nimport { getGenres } from \"../../redux/actions/popular-action\";\r\nimport { getFavorite } from \"../../redux/actions/favorite-action\";\r\n\r\nexport const FavoriteContainer = (props) => {\r\n  const dispatch = useDispatch();\r\n  const genres = useSelector((state) => state.popular.genres);\r\n  const favorite = useSelector((state) => state.favorite.favorite);\r\n  useEffect(() => {\r\n    dispatch(getGenres());\r\n    dispatch(getFavorite());\r\n  }, []);\r\n  return <Favorite favorite={favorite} genres={genres} />;\r\n};\r\n","import Pagination from \"@material-ui/lab/Pagination\";\r\n\r\nexport const Paginator = (props) => {\r\n  return (\r\n    <div>\r\n      <Pagination\r\n        count={props.count}\r\n        page={props.page}\r\n        onChange={props.hadleChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/loadinggif.5bea0438.gif\";","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles(() => ({\r\n  loadingGif: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n}));\r\n","import LoadingGif from \"../../common/assets/loadinggif.gif\";\r\nimport useStyles from \"./PreloaderStyle\";\r\n\r\nexport const Preloader = () => {\r\n  const style = useStyles();\r\n  return (\r\n    <div className={style.loadingGif}>\r\n      <img src={LoadingGif} alt=\"Loading Gif\" />\r\n    </div>\r\n  );\r\n};\r\n","import { TextField } from \"@material-ui/core\";\r\n\r\nexport const Search = (props) => {\r\n  return (\r\n    <div>\r\n      <TextField\r\n        onKeyPress={props.onSearch}\r\n        onChange={props.onSearchChange}\r\n        id=\"standard-basic\"\r\n        label={props.label}\r\n        fullWidth\r\n        value={props.search}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles(() => ({\r\n  row: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  paginator: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    marginTop: 50,\r\n    marginBottom: 50,\r\n  },\r\n}));\r\n","import { FilmCard } from \"../FilmCard/FilmCard\";\r\nimport { Paginator } from \"../Paginator/Paginator\";\r\nimport { Preloader } from \"../Preloader/Preloader\";\r\nimport { Search } from \"../Search/Search\";\r\nimport useStyles from \"./PopularStyle\";\r\n\r\nexport const Popular = (props) => {\r\n  const style = useStyles();\r\n  return (\r\n    <>\r\n      <Search\r\n        search={props.search}\r\n        onSearchChange={props.onSearchChange}\r\n        onSearch={props.onSearch}\r\n        label=\"Enter a movie\"\r\n      />\r\n      {props.searchResult.length === 0 ? (\r\n        <div>\r\n          {props.popularFilms.results ? (\r\n            <div>\r\n              <div className={style.row}>\r\n                {props.popularFilms.results.map((film, index) => {\r\n                  return (\r\n                    <div key={film.id}>\r\n                      <FilmCard film={film} genres={props.genres} />\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n              <div className={style.paginator}>\r\n                <Paginator\r\n                  count={props.popularFilms.total_pages}\r\n                  page={props.page}\r\n                  hadleChange={props.hadleChange}\r\n                />\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <Preloader />\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <div className={style.row}>\r\n          {props.searchResult.results.map((film) => {\r\n            return (\r\n              <div>\r\n                <FilmCard key={film.id} film={film} genres={props.genres} />\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Popular } from \"../../components/Popular/Popular\";\r\nimport { useEffect } from \"react\";\r\nimport { getPopularFilms, getGenres } from \"../../redux/actions/popular-action\";\r\nimport { getResult } from \"../../redux/actions/search-action\";\r\n\r\nexport const PopularContainer = () => {\r\n  const dispatch = useDispatch();\r\n  const [page, setPage] = useState(1);\r\n  const [search, setSearch] = useState(\"\");\r\n  const popularFilms = useSelector((state) => state.popular.popularFilms);\r\n  const genres = useSelector((state) => state.popular.genres);\r\n  const searchResult = useSelector((state) => state.search.result);\r\n  const isFavorite = useSelector((state) => state.favorite.isFavorite);\r\n  useEffect(() => {\r\n    dispatch(getPopularFilms(page));\r\n    dispatch(getGenres());\r\n  }, []);\r\n  const hadleChange = (event, value) => {\r\n    setPage(value);\r\n    dispatch(getPopularFilms(value));\r\n    window.scroll(0, 0);\r\n  };\r\n  const onSearchChange = (event) => {\r\n    setSearch(event.target.value);\r\n  };\r\n  const onSearch = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      dispatch(getResult(search));\r\n      setSearch(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Popular\r\n      popularFilms={popularFilms}\r\n      genres={genres}\r\n      page={page}\r\n      hadleChange={hadleChange}\r\n      search={search}\r\n      onSearchChange={onSearchChange}\r\n      onSearch={onSearch}\r\n      searchResult={searchResult}\r\n    />\r\n  );\r\n};\r\n","import { API } from \"../../Api/api\";\r\nimport { SET_RESULT } from \"../../constants\";\r\n\r\nconst setResult = (result) => ({type: SET_RESULT, result})\r\nexport const getResult = (query) => async (dispatch) => {\r\n    const response = await API.getSearch (query)\r\n    dispatch (setResult(response.data))\r\n}","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles(() => ({\r\n  posterbg: {\r\n    position: \"relative\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    flexDirection: \"column\",\r\n    \"&:after\": {\r\n      content: '\"\"',\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      backgroundColor: \"black\",\r\n      position: \"absolute\",\r\n      opacity: \"0.5\",\r\n      top: 0,\r\n      left: 0,\r\n    },\r\n  },\r\n  title: {\r\n    color: \"#fff\",\r\n    zIndex: 2,\r\n    position: \"relative\",\r\n    padding: \"0px 10px 0px 10px\",\r\n    textAlign: \"center\",\r\n    fontSize: 30,\r\n  },\r\n  container: {\r\n    maxWidth: 1000,\r\n    margin: \"0 auto\",\r\n  },\r\n  cardRow: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  overview: {\r\n    maxWidth: 600,\r\n  },\r\n  recommendationRow: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  recTitlte: {\r\n    textAlign: \"center\",\r\n    paddingTop: 50,\r\n  },\r\n  \"@media (max-width: 700px)\": {\r\n    cardRow: {\r\n      flexDirection: \"column\",\r\n    },\r\n    overview: {\r\n      paddingTop: 25,\r\n    },\r\n  },\r\n}));\r\n","import { CardContent, Typography, Card, Button } from \"@material-ui/core\";\r\nimport { useEffect } from \"react\";\r\nimport { FilmCard } from \"../FilmCard/FilmCard\";\r\nimport { Preloader } from \"../Preloader/Preloader\";\r\nimport useStyles from \"./FilmPageStyle\";\r\nimport { isFilmFavourite } from \"../../services/localStorage\";\r\n\r\nexport const FilmPage = ({\r\n  filmPageData,\r\n  recommendations,\r\n  genres,\r\n  addFavoriteFilm,\r\n}) => {\r\n  const style = useStyles();\r\n  const backdropPath = `https://image.tmdb.org/t/p/original/${filmPageData.backdrop_path}`;\r\n  const isFavorite = isFilmFavourite(filmPageData.id);\r\n  useEffect(() => {\r\n    window.scroll(0, 0);\r\n  }, []);\r\n  return (\r\n    <>\r\n      {Object.keys(filmPageData).length > 0 ? (\r\n        <div>\r\n          <div>\r\n            <div\r\n              className={style.posterbg}\r\n              style={{\r\n                backgroundImage: `url(${backdropPath})`,\r\n                width: \"100%\",\r\n                height: \"780px\",\r\n                backgroundRepeat: \"no-repeat\",\r\n                margin: \"0 auto\",\r\n                marginBottom: \"100px\",\r\n                backgroundPosition: \"50% 50%\",\r\n              }}\r\n            >\r\n              <Typography className={style.title}>\r\n                {filmPageData.title}\r\n              </Typography>\r\n            </div>\r\n            <div className={style.container}>\r\n              <Card>\r\n                <CardContent>\r\n                  <div className={style.cardRow}>\r\n                    <div className={style.info}>\r\n                      <Typography>\r\n                        Genres:{\" \"}\r\n                        {filmPageData.genres\r\n                          .map((genre) => genre.name)\r\n                          .join(\",\")}\r\n                      </Typography>\r\n                      <Typography>\r\n                        Original language: {filmPageData.original_language}\r\n                      </Typography>\r\n                      <Typography>\r\n                        Popuilarity: {filmPageData.popularity}\r\n                      </Typography>\r\n                      <Typography>\r\n                        Release date: {filmPageData.release_date}\r\n                      </Typography>\r\n                      {isFavorite ? (\r\n                        <Typography color=\"primary\">\r\n                          Film added to favorite list\r\n                        </Typography>\r\n                      ) : (\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          onClick={addFavoriteFilm}\r\n                        >\r\n                          Add to favorite\r\n                        </Button>\r\n                      )}\r\n                    </div>\r\n                    <div className={style.overview}>\r\n                      <Typography className={style.overview}>\r\n                        {filmPageData.overview}\r\n                      </Typography>\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n              {recommendations.length > 0 && (\r\n                <>\r\n                  <div className={style.recTitlte}>\r\n                    <Typography variant=\"h4\">Recommendation</Typography>\r\n                  </div>\r\n                  <div className={style.recommendationRow}>\r\n                    {recommendations.map((film) => {\r\n                      return (\r\n                        <FilmCard film={film} key={film.id} genres={genres} />\r\n                      );\r\n                    })}\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <Preloader />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport { FilmPage } from \"../../components/FilmPage/FilmPage\";\r\nimport {\r\n  getFilmPageData,\r\n  getRecommendations,\r\n} from \"../../redux/actions/film-page-action\";\r\nimport { getGenres } from \"../../redux/actions/popular-action\";\r\nimport {\r\n  getIsFavorite,\r\n  addFavorite,\r\n} from \"../../redux/actions/favorite-action\";\r\n\r\nconst FilmPageContainer = (props) => {\r\n  const MOVIE_ID = props.match.params.movieId;\r\n  const dispatch = useDispatch();\r\n  const filmPageData = useSelector((state) => state.filmPageData.filmPageData);\r\n  const recommendations = useSelector(\r\n    (state) => state.filmPageData.recommendations\r\n  );\r\n  const genres = useSelector((state) => state.popular.genres);\r\n  const isFavorite = useSelector((state) => state.favorite.isFavorite);\r\n\r\n  useEffect(() => {\r\n    dispatch(getFilmPageData(MOVIE_ID));\r\n    dispatch(getRecommendations(MOVIE_ID));\r\n    dispatch(getGenres());\r\n  }, []);\r\n  const addFavoriteFilm = () => {\r\n    dispatch(addFavorite(filmPageData));\r\n    dispatch(getIsFavorite(filmPageData.id));\r\n  };\r\n  return (\r\n    <FilmPage\r\n      filmPageData={filmPageData}\r\n      recommendations={recommendations}\r\n      genres={genres}\r\n      addFavoriteFilm={addFavoriteFilm}\r\n      isFavorite={isFavorite}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(FilmPageContainer);\r\n","import { API } from \"../../Api/api\";\r\nimport { SET_FILM_PAGE_DATA, SET_RECOMMENDATIONS } from \"../../constants\";\r\n\r\nconst setFilmPageData = (filmPageData) => ({\r\n  type: SET_FILM_PAGE_DATA,\r\n  filmPageData,\r\n});\r\nexport const getFilmPageData = (movieId) => async (dispatch) => {\r\n  const response = await API.getFilmData(movieId);\r\n  dispatch(setFilmPageData(response.data));\r\n};\r\n\r\nconst setRecommendations = (recommendations) => ({\r\n  type: SET_RECOMMENDATIONS,\r\n  recommendations,\r\n});\r\nexport const getRecommendations = (movieId) => async (dispatch) => {\r\n  const response = await API.getRecommendations(movieId);\r\n  dispatch(setRecommendations(response.data.results));\r\n};\r\n","import React from \"react\";\nimport { Route } from \"react-router\";\nimport \"./App.css\";\nimport { Header } from \"./components/Header/Header\";\nimport { FavoriteContainer } from \"./containers/FavoriteContainer/FavoriteContainer\";\nimport { PopularContainer } from \"./containers/PopularContainer/PopularContainer\";\nimport FilmPageContainer from \"./containers/FilmPageContainer/FilmPageContainer\";\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Route path=\"/filmpage/:movieId\" render={() => <FilmPageContainer />} />\n      <div className=\"container\">\n        <Route path=\"/pagemov\" render={() => <PopularContainer />} />\n        <Route path=\"/favorite\" render={() => <FavoriteContainer />} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { SET_POPULAR_FILMS, SET_GENRES } from \"../../constants\";\r\n\r\nconst initialState = {\r\n  popularFilms: [],\r\n  genres: [],\r\n};\r\n\r\nexport const PopularReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_POPULAR_FILMS:\r\n      return { ...state, popularFilms: action.popularFilms };\r\n    case SET_GENRES:\r\n      return { ...state, genres: action.genres };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { SET_RESULT } from \"../../constants\";\r\n\r\nconst initialState = {\r\n  result: [],\r\n};\r\n\r\nexport const SearchReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_RESULT:\r\n      return { ...state, result: action.result };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { SET_FILM_PAGE_DATA, SET_RECOMMENDATIONS } from \"../../constants\";\r\n\r\nconst initialState = {\r\n  filmPageData: {},\r\n  recommendations: [],\r\n};\r\n\r\nexport const FilmPageReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_FILM_PAGE_DATA:\r\n      return { ...state, filmPageData: action.filmPageData };\r\n    case SET_RECOMMENDATIONS:\r\n      return { ...state, recommendations: action.recommendations };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  ADD_FAVORITE,\r\n  REMOVE_FAVORITE,\r\n  SET_FAVORITE,\r\n  SET_IS_FAVORITE,\r\n} from \"../../constants\";\r\n\r\nconst initialState = {\r\n  favorite: [],\r\n  isFavorite: false,\r\n};\r\n\r\nexport const FavoriteReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_FAVORITE:\r\n      return { ...state, favorite: action.favorite };\r\n    case ADD_FAVORITE:\r\n      return {\r\n        ...state,\r\n        favorite: [action.item, ...state.favorite],\r\n      };\r\n    case REMOVE_FAVORITE:\r\n      return {\r\n        ...state,\r\n        favorite: [...state.favorite.filter((film) => film.id !== action.id)],\r\n      };\r\n    case SET_IS_FAVORITE:\r\n      return {\r\n        ...state,\r\n        isFavorite: !state.isFavorite,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport { PopularReducer } from \"./reducers/popular-reducer\";\r\nimport thunkMiddleWare from \"redux-thunk\";\r\nimport { SearchReducer } from \"./reducers/search-reducer\";\r\nimport { FilmPageReducer } from \"./reducers/film-page-reducer\";\r\nimport { FavoriteReducer } from \"./reducers/favorite-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  popular: PopularReducer,\r\n  search: SearchReducer,\r\n  filmPageData: FilmPageReducer,\r\n  favorite: FavoriteReducer,\r\n});\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleWare));\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/redux-store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}